#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tehah:server');
var http = require('http');
var mysql = require('mysql');
var deg2met = require('./distance')
var inDistance = 10; // meters

/**
 * Debug
 */
var fs = require('fs');
var util = require('util');
var log_file = fs.createWriteStream(__dirname + '/debug.log', {flags : 'w'});
var log_stdout = process.stdout;

var console = {};
console.log = function(data) {
  log_file.write(util.format(data) + '\n');
  log_stdout.write(util.format(data) + '\n');
}
console.error = function(data) {
  log_file.write(util.format(data) + '\n');
  log_stdout.write(util.format(data) + '\n');
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io')(server);
var serverName = process.env.NAME || 'Unknown';

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Connect to mySQL database
 */
/*
var connection = mysql.createConnection({
  host     : process.env.RDS_HOSTNAME,
  user     : process.env.RDS_USERNAME,
  password : process.env.RDS_PASSWORD,
  port     : process.env.RDS_PORT,
});

// Connects to database
connection.connect(function(err) {
  if (err) {
    console.error('Database connection failed: ' + err.stack);
  } else {
    console.log('Connected to database.');
  }
});

// Erases "tehahdb" database
connection.query('DROP DATABASE tehahdb');

// Creates "tehahdb" database
connection.query('CREATE DATABASE tehahdb', function(err, result) {
    // In case there is an error during the creation
    if(err) {
        console.error('Database failed to be created.');
    } else {
        console.log('Database created.');
    }
});

// Use "tehahdb"" database
connection.query('USE tehahdb');

// Create "rooms" table
connection.query('CREATE TABLE rooms (roomName CHAR(28) NOT NULL, latitude DOUBLE NOT NULL, longitude DOUBLE NOT NULL)', function(err, result) {
    // In case there is an error during the creation
    if(err) {
        console.error('Database *rooms* connection failed: ' + err.stack);
    } else {
        console.log('Connected to *rooms* database.');
    }
});

// Create "users" table
connection.query('CREATE TABLE users (nameID CHAR(24) NOT NULL, roomName CHAR(28) NOT NULL)', function(err, result) {
    // In case there is an error during the creation
    if(err) {
        console.error('Database *users* connection failed: ' + err.stack);
    } else {
        console.log('Connected to *users* database.');
    }
});
*/
/**
 * Socket.io chat room
 */
io.on('connection', function (socket) {
  var addedUser = false;

  // When the client emits 'create room', this listens and executes
  socket.on('create room', function(data) {
    var chatRoom = { nameID : data.nameID, roomName : data.roomName, latitude : data.latitude, longitude : data.longitude };
    var userRoom = { nameID : data.nameID, roomName : data.roomName };
    console.log("Creating chat room");
    console.log(data);
    console.log(chatRoom);
    connection.query('INSERT INTO rooms SET ?', chatRoom, function(err, res) {
      if (err) throw err;
      console.log('Last insert ID:', res.insertID);
    })
    connection.query('INSERT INTO users SET ?', userRoom, function(err, res) {
      if (err) throw err;
      console.log('Last insert ID:', res.insertID);
    })
    socket.join(chatRoom.roomName);
    // Echo globally (all clients) that a person has connected
    io.sockets.in(data.room).broadcast.emit('user joined', {
      username: socket.username
    });
  });

  // When the client emits 'display rooms', this listens and executes
  socket.on('display local', function(data) {
    var userLocation = { nameID: data.nameID, latitude : data.latitude, longitude : data.longitude };
    var localRooms = [{ roomName : 'Green', roomName : 'Purple', roomName : 'Orange'}];
    connection.query('SELECT * FROM rooms', function(err, rows, fields) {
      if (err) throw err;
      var latDif = 0;
      var lonDif = 0;
      var latWithin = deg2met.AtLatitude(inDistance, userLocation.data.latitude);
      var lonWithin = det2met.AtLongitude(inDistance, userLocation.data.latitude);
      console.log("latWithin: ", latWithin);
      console.log("lonWithin: ", lonWithin);
      for (var i = 0; i < rows.length; i++) {
        latDif = Math.abs(userLocation.latitude - rows.latitude);
        lonDif = Math.abs(userLocation.longitude - rows.longitude);
        if (latDiv < latWithin && lonDif < lonWithin) {
          localRooms.push({'roomName' : rows.roomName });
        }
      }
    });
    console.log("The rooms in database:");
    console.log(localRooms);
    Socket.emit('display rooms', localRooms);
  });

/*
  socket.on('display rooms', function(data) {
    var userLocation = { nameID: data.nameID, latitude : data.latitude, longitude : data.longitude };
    var localRooms = [];
    var userRooms = [];
    connection.query('SELECT * FROM rooms', function(err, rows, fields) {
      if (err) throw err;
      var latDif = 0;
      var lonDif = 0;
      var latWithin = deg2met.AtLatitude(inDistance, userLocation.data.latitude);
      var lonWithin = det2met.AtLongitude(inDistance, userLocation.data.latitude);
      console.log("latWithin: ", latWithin);
      console.log("lonWithin: ", lonWithin);
      for (var i = 0; i < rows.length; i++) {
        latDif = Math.abs(userLocation.latitude - rows.latitude);
        lonDif = Math.abs(userLocation.longitude - rows.longitude);
        if (latDiv < latWithin && lonDif < lonWithin) {
          localRooms.push(rows.roomName);
        }
      }
    });
    console.log("The rooms in database:");
    console.log(localRooms);
    Socket.emit('display rooms', {userRooms, localRooms});
  });
  */

  // When the client emits 'select room', this listens and executes
  socket.on('join room', function(data) {
    socket.username = username;
    console.log("Join room");
    console.log(data);
    socket.join(data);
    // Echo globally (all clients) that a person has connected
    io.sockets.in(data.room).broadcast.emit('user joined', {
      username: socket.username
    });
  });

  // When the client emits 'leave room', this listens and executes
  socket.on('leave room', function(data) {
    socket.username = username;
    console.log("Leave room");
    console.log(data);
    socket.leave(data);
    io.sockets.in(data.room).broadcast.emit('user left', {
        username: socket.username
    });
  });

  // When the client emits 'new message', this listens and executes
  socket.on('multi new message', function(data) {
    socket.username = username;
    console.log("New message");
    console.log(data);
    // We tell the client to execute 'new message'
    io.sockets.in(data.room).broadcast.emit('multi new message', {
      username: socket.username,
      message: data
    });
  });

  // When the client emits 'typing', we broadcast it to others
  socket.on('multi typing', function(data) {
    console.log("Typing");
    console.log(data);
    io.sockets.in(data.room).broadcast.emit('multi typing', {
      username: socket.username
    });
  });

  // When the user disconnects, perform this
  socket.on('multi disconnect', function(data) {
    socket.leave(data);
    io.sockets.in(data.room).broadcast.emit('multi user left', {
        username: socket.username
    });
  });

/**
 * Socket.io chat room old code ******************
 */

  var numUsers = 0;

  // when the client emits 'new message', this listens and executes
  socket.on('new message', function (data) {
    // we tell the client to execute 'new message'
    socket.broadcast.emit('new message', {
      username: socket.username,
      message: data
    });
  });

  // when the client emits 'add user', this listens and executes
  socket.on('add user', function (username) {
    if (addedUser) return;

    // we store the username in the socket session for this client
    socket.username = username;
    ++numUsers;
    addedUser = true;
    socket.emit('login', {
      numUsers: numUsers
    });
    // echo globally (all clients) that a person has connected
    socket.broadcast.emit('user joined', {
      username: socket.username,
      numUsers: numUsers
    });
  });

  // when the client emits 'typing', we broadcast it to others
  socket.on('typing', function () {
    socket.broadcast.emit('typing', {
      username: socket.username
    });
  });

  // when the client emits 'stop typing', we broadcast it to others
  socket.on('stop typing', function () {
    socket.broadcast.emit('stop typing', {
      username: socket.username
    });
  });

  // when the user disconnects.. perform this
  socket.on('disconnect', function () {
    if (addedUser) {
      --numUsers;

      // echo globally that this client has left
      socket.broadcast.emit('user left', {
        username: socket.username,
        numUsers: numUsers
      });
    }
  });
});